/*
* generated by Xtext
*/

package org.xtext.workshop.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WebGuiGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainDomainModelParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Assignment cWebAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWebWebModelParserRuleCall_3_0 = (RuleCall)cWebAssignment_3.eContents().get(0);
		
		//Model:
		//	"model" name=ID domain=DomainModel web=WebModel;
		public ParserRule getRule() { return rule; }

		//"model" name=ID domain=DomainModel web=WebModel
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//domain=DomainModel
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//DomainModel
		public RuleCall getDomainDomainModelParserRuleCall_2_0() { return cDomainDomainModelParserRuleCall_2_0; }

		//web=WebModel
		public Assignment getWebAssignment_3() { return cWebAssignment_3; }

		//WebModel
		public RuleCall getWebWebModelParserRuleCall_3_0() { return cWebWebModelParserRuleCall_3_0; }
	}

	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		
		/// *
		// * +--------------+
		// * | Domain model |
		// * +--------------+
		// * /DomainModel:
		//	"domain:" types+=Type+;
		public ParserRule getRule() { return rule; }

		//"domain:" types+=Type+
		public Group getGroup() { return cGroup; }

		//"domain:"
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }

		//types+=Type+
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0() { return cTypesTypeParserRuleCall_1_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	"entity" name=ID "{" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ID "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultivaluedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cMultivaluedAlternatives_3_0 = (Alternatives)cMultivaluedAssignment_3.eContents().get(0);
		private final Keyword cMultivaluedSKeyword_3_0_0 = (Keyword)cMultivaluedAlternatives_3_0.eContents().get(0);
		private final Keyword cMultivaluedEsKeyword_3_0_1 = (Keyword)cMultivaluedAlternatives_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		
		//Feature:
		//	name=ID ":" type=[Type] multivalued?=("(s)" | "(es)")? ("=" expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=[Type] multivalued?=("(s)" | "(es)")? ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[Type]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_2_0_1() { return cTypeTypeIDTerminalRuleCall_2_0_1; }

		//multivalued?=("(s)" | "(es)")?
		public Assignment getMultivaluedAssignment_3() { return cMultivaluedAssignment_3; }

		//"(s)" | "(es)"
		public Alternatives getMultivaluedAlternatives_3_0() { return cMultivaluedAlternatives_3_0; }

		//"(s)"
		public Keyword getMultivaluedSKeyword_3_0_0() { return cMultivaluedSKeyword_3_0_0; }

		//"(es)"
		public Keyword getMultivaluedEsKeyword_3_0_1() { return cMultivaluedEsKeyword_3_0_1; }

		//("=" expression=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0() { return cExpressionExpressionParserRuleCall_4_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Entity | DataType;
		public ParserRule getRule() { return rule; }

		//Entity | DataType
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//	"type" name=ID;
		public ParserRule getRule() { return rule; }

		//"type" name=ID
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class WebModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WebModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWebKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPagesPageParserRuleCall_1_0 = (RuleCall)cPagesAssignment_1.eContents().get(0);
		
		/// *
		// * +-----------+
		// * | Web model |
		// * +-----------+
		// * /WebModel:
		//	"web:" pages+=Page+;
		public ParserRule getRule() { return rule; }

		//"web:" pages+=Page+
		public Group getGroup() { return cGroup; }

		//"web:"
		public Keyword getWebKeyword_0() { return cWebKeyword_0; }

		//pages+=Page+
		public Assignment getPagesAssignment_1() { return cPagesAssignment_1; }

		//Page
		public RuleCall getPagesPageParserRuleCall_1_0() { return cPagesPageParserRuleCall_1_0; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTitleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTitleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTitleSTRINGTerminalRuleCall_5_0 = (RuleCall)cTitleAssignment_5.eContents().get(0);
		private final Keyword cContextKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEntityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cEntityEntityCrossReference_8_0 = (CrossReference)cEntityAssignment_8.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_8_0_1 = (RuleCall)cEntityEntityCrossReference_8_0.eContents().get(1);
		private final Assignment cContentsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cContentsPageElementParserRuleCall_9_0 = (RuleCall)cContentsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Page:
		//	"page" name=ID "{" "title" "=" title=STRING "context" "=" entity=[Entity] contents+=PageElement* "}";
		public ParserRule getRule() { return rule; }

		//"page" name=ID "{" "title" "=" title=STRING "context" "=" entity=[Entity] contents+=PageElement* "}"
		public Group getGroup() { return cGroup; }

		//"page"
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"title"
		public Keyword getTitleKeyword_3() { return cTitleKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//title=STRING
		public Assignment getTitleAssignment_5() { return cTitleAssignment_5; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_5_0() { return cTitleSTRINGTerminalRuleCall_5_0; }

		//"context"
		public Keyword getContextKeyword_6() { return cContextKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//entity=[Entity]
		public Assignment getEntityAssignment_8() { return cEntityAssignment_8; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_8_0() { return cEntityEntityCrossReference_8_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_8_0_1() { return cEntityEntityIDTerminalRuleCall_8_0_1; }

		//contents+=PageElement*
		public Assignment getContentsAssignment_9() { return cContentsAssignment_9; }

		//PageElement
		public RuleCall getContentsPageElementParserRuleCall_9_0() { return cContentsPageElementParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class PageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDisplayElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// (initial) scope for PageElement-s: features of referenced Entity
		//PageElement:
		//	ActionElement | DisplayElement;
		public ParserRule getRule() { return rule; }

		//ActionElement | DisplayElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActionElement
		public RuleCall getActionElementParserRuleCall_0() { return cActionElementParserRuleCall_0; }

		//DisplayElement
		public RuleCall getDisplayElementParserRuleCall_1() { return cDisplayElementParserRuleCall_1; }
	}

	public class ActionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// ~ link
		//ActionElement:
		//	"action" name=ID;
		public ParserRule getRule() { return rule; }

		//"action" name=ID
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class DisplayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisplayElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceDomainPathParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//// ~ display field
		//DisplayElement:
		//	"show" reference=DomainPath;
		public ParserRule getRule() { return rule; }

		//"show" reference=DomainPath
		public Group getGroup() { return cGroup; }

		//"show"
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }

		//reference=DomainPath
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//DomainPath
		public RuleCall getReferenceDomainPathParserRuleCall_1_0() { return cReferenceDomainPathParserRuleCall_1_0; }
	}

	public class DomainPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailDomainPathTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//DomainPath:
		//	feature=[Feature] tail=DomainPathTail?;
		public ParserRule getRule() { return rule; }

		//feature=[Feature] tail=DomainPathTail?
		public Group getGroup() { return cGroup; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_0_0() { return cFeatureFeatureCrossReference_0_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_0_1; }

		//tail=DomainPathTail?
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }

		//DomainPathTail
		public RuleCall getTailDomainPathTailParserRuleCall_1_0() { return cTailDomainPathTailParserRuleCall_1_0; }
	}

	public class DomainPathTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainPathTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailDomainPathTailParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		
		//// scope(feature)=features of Entity reference by container or empty
		//DomainPathTail:
		//	"." feature=[Feature] tail=DomainPathTail?;
		public ParserRule getRule() { return rule; }

		//"." feature=[Feature] tail=DomainPathTail?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_0_1; }

		//tail=DomainPathTail?
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }

		//DomainPathTail
		public RuleCall getTailDomainPathTailParserRuleCall_2_0() { return cTailDomainPathTailParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// scope(feature)=features of Entity reference by container or empty
		//Expression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAddLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSubtractLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Add.left=current} "+" | {Subtract.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Add.left=current} "+" | {Subtract.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Add.left=current} "+" | {Subtract.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Add.left=current} "+" | {Subtract.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Add.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Add.left=current}
		public Action getAddLeftAction_1_0_0_0() { return cAddLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Subtract.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Subtract.left=current}
		public Action getSubtractLeftAction_1_0_1_0() { return cSubtractLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightValueParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Value (({Multiply.left=current} "*" | {Divide.left=current} "/") right=Value)*;
		public ParserRule getRule() { return rule; }

		//Value (({Multiply.left=current} "*" | {Divide.left=current} "/") right=Value)*
		public Group getGroup() { return cGroup; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//(({Multiply.left=current} "*" | {Divide.left=current} "/") right=Value)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiply.left=current} "*" | {Divide.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multiply.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0_0() { return cMultiplyLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Divide.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_1_0() { return cDivideLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=Value
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Value
		public RuleCall getRightValueParserRuleCall_1_1_0() { return cRightValueParserRuleCall_1_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainPathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	NumberLiteral | DomainPath;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | DomainPath
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//DomainPath
		public RuleCall getDomainPathParserRuleCall_1() { return cDomainPathParserRuleCall_1; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private ModelElements pModel;
	private DomainModelElements pDomainModel;
	private EntityElements pEntity;
	private FeatureElements pFeature;
	private TypeElements pType;
	private DataTypeElements pDataType;
	private WebModelElements pWebModel;
	private PageElements pPage;
	private PageElementElements pPageElement;
	private ActionElementElements pActionElement;
	private DisplayElementElements pDisplayElement;
	private DomainPathElements pDomainPath;
	private DomainPathTailElements pDomainPathTail;
	private ExpressionElements pExpression;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private ValueElements pValue;
	private NumberLiteralElements pNumberLiteral;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WebGuiGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"model" name=ID domain=DomainModel web=WebModel;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// *
	// * +--------------+
	// * | Domain model |
	// * +--------------+
	// * /DomainModel:
	//	"domain:" types+=Type+;
	public DomainModelElements getDomainModelAccess() {
		return (pDomainModel != null) ? pDomainModel : (pDomainModel = new DomainModelElements());
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID "{" features+=Feature* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Feature:
	//	name=ID ":" type=[Type] multivalued?=("(s)" | "(es)")? ("=" expression=Expression)?;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Type:
	//	Entity | DataType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//DataType:
	//	"type" name=ID;
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	/// *
	// * +-----------+
	// * | Web model |
	// * +-----------+
	// * /WebModel:
	//	"web:" pages+=Page+;
	public WebModelElements getWebModelAccess() {
		return (pWebModel != null) ? pWebModel : (pWebModel = new WebModelElements());
	}
	
	public ParserRule getWebModelRule() {
		return getWebModelAccess().getRule();
	}

	//Page:
	//	"page" name=ID "{" "title" "=" title=STRING "context" "=" entity=[Entity] contents+=PageElement* "}";
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//// (initial) scope for PageElement-s: features of referenced Entity
	//PageElement:
	//	ActionElement | DisplayElement;
	public PageElementElements getPageElementAccess() {
		return (pPageElement != null) ? pPageElement : (pPageElement = new PageElementElements());
	}
	
	public ParserRule getPageElementRule() {
		return getPageElementAccess().getRule();
	}

	//// ~ link
	//ActionElement:
	//	"action" name=ID;
	public ActionElementElements getActionElementAccess() {
		return (pActionElement != null) ? pActionElement : (pActionElement = new ActionElementElements());
	}
	
	public ParserRule getActionElementRule() {
		return getActionElementAccess().getRule();
	}

	//// ~ display field
	//DisplayElement:
	//	"show" reference=DomainPath;
	public DisplayElementElements getDisplayElementAccess() {
		return (pDisplayElement != null) ? pDisplayElement : (pDisplayElement = new DisplayElementElements());
	}
	
	public ParserRule getDisplayElementRule() {
		return getDisplayElementAccess().getRule();
	}

	//DomainPath:
	//	feature=[Feature] tail=DomainPathTail?;
	public DomainPathElements getDomainPathAccess() {
		return (pDomainPath != null) ? pDomainPath : (pDomainPath = new DomainPathElements());
	}
	
	public ParserRule getDomainPathRule() {
		return getDomainPathAccess().getRule();
	}

	//// scope(feature)=features of Entity reference by container or empty
	//DomainPathTail:
	//	"." feature=[Feature] tail=DomainPathTail?;
	public DomainPathTailElements getDomainPathTailAccess() {
		return (pDomainPathTail != null) ? pDomainPathTail : (pDomainPathTail = new DomainPathTailElements());
	}
	
	public ParserRule getDomainPathTailRule() {
		return getDomainPathTailAccess().getRule();
	}

	//// scope(feature)=features of Entity reference by container or empty
	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Add.left=current} "+" | {Subtract.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Value (({Multiply.left=current} "*" | {Divide.left=current} "/") right=Value)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Value:
	//	NumberLiteral | DomainPath;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//NumberLiteral:
	//	value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
